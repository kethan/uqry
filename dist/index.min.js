var uqry=function(e){const r=(e,t)=>{if(e===t)return!0;if(null==e||null==t||typeof e!=typeof t)return!1;if("object"==typeof e){if(Array.isArray(e)!==Array.isArray(t))return!1;const n=Object.keys(e),i=Object.keys(t);return n.length===i.length&&n.every((n=>r(e[n],t[n])))}return!1},t=e=>"object"==typeof e&&!Array.isArray(e),n=e=>"string"==typeof e&&e.startsWith("$"),i=(e,r)=>(Array.isArray(r)?r:r.split(".")).reduce(((e,r)=>e?e[r]:e),e),s={$eq:(e,t)=>r(e,t),$ne:(e,t)=>!r(e,t),$gt:(e,r)=>r>e,$gte:(e,r)=>r>=e,$lt:(e,r)=>r<e,$lte:(e,r)=>r<=e,$in:(e,r)=>r.some((r=>e.includes(r))),$nin:(e,r)=>!r.some((r=>e.includes(r))),$and:(e,r)=>e.every((e=>o(e)(r))),$or:(e,r)=>e.some((e=>o(e)(r))),$not:(e,r)=>!o(e)(r),$regex:(e,r)=>new RegExp(e).test(r)},c={$add:(e,r)=>e.map((e=>a(e)(r))).reduce(((e,r)=>e+r),0),$subtract:(e,r)=>e.map((e=>a(e)(r))).reduce(((e,r)=>e-r)),$multiply:(e,r)=>e.map((e=>a(e)(r))).reduce(((e,r)=>e*r),1),$divide:(e,r)=>e.map((e=>a(e)(r))).reduce(((e,r)=>e/r)),$concat:(e,r)=>e.map((e=>a(e)(r))).join(""),$min:(e,r)=>Math.min(...e.map((e=>a(e)(r)))),$max:(e,r)=>Math.max(...e.map((e=>a(e)(r)))),$avg:(e,r)=>e.map((e=>a(e)(r))).reduce(((e,r)=>e+r),0)/e.length,$sum:(e,r)=>e.map((e=>a(e)(r))).reduce(((e,r)=>e+r),0),$cond:([e,r,t],n)=>a(e)(n)?a(r)(n):a(t)(n),$eq:([e,t],n)=>r(a(e)(n),a(t)(n)),$ne:([e,t],n)=>!r(a(e)(n),a(t)(n)),$gt:([e,r],t)=>a(e)(t)>a(r)(t),$gte:([e,r],t)=>a(e)(t)>=a(r)(t),$lt:([e,r],t)=>a(e)(t)<a(r)(t),$lte:([e,r],t)=>a(e)(t)<=a(r)(t),$in:([e,r],t)=>a(r)(t).includes(a(e)(t)),$nin:([e,r],t)=>!a(r)(t).includes(a(e)(t)),$and:(e,r)=>e.every((e=>a(e)(r))),$or:(e,r)=>e.some((e=>a(e)(r))),$not:(e,r)=>!a(e[0])(r),$switch:(e,r)=>{const{branches:t,default:n}=e[0];for(const e of t)if(a(e.case)(r))return a(e.then)(r);return a(n)(r)}},$={$project:(e,r)=>{const s={};return Object.entries(e).forEach((([e,c])=>{1===c?s[e]=i(r,e):(n(c)||t(c))&&(s[e]=a(c)(r))})),s},$match:(e,r)=>o(e)(r)?r:null,$group:({_id:e,...r},t)=>{const n=t.reduce(((t,n)=>{const i=a(e)(n);return t[i]||(t[i]={_id:i}),Object.entries(r).forEach((([e,r])=>{t[i][e]||(t[i][e]=[]),t[i][e].push(a(r)(n))})),t}),{});return Object.values(n).map((e=>(Object.entries(e).forEach((([t,n])=>{if("_id"!==t){const[i,s]=Object.entries(r[t])[0];e[t]=c[i](n,{})}})),e)))},$sort:(e,r)=>{const[t,n]=Object.entries(e)[0];return r.sort(((e,r)=>i(e,t)>i(r,t)?n:-n))},$skip:(e,r)=>r.slice(e),$limit:(e,r)=>r.slice(0,e),$count:(e,r)=>[{[e]:r.length}]},o=e=>c=>t(e)?Object.entries(e).every((([e,r])=>n(e)?s[e](r,c):o(r)(i(c,e)))):r(c,e),a=e=>r=>{if(n(e))return i(r,e.slice(1));if(t(e)){const[t,n]=Object.entries(e)[0];if(c[t])return c[t](Array.isArray(n)?n:[n],r)}return e};return e.add=(e,r)=>c[e]=r,e.aggregate=e=>r=>e.reduce(((e,r)=>{const[t,n]=Object.entries(r)[0];if($[t])return["$group","$sort","$skip","$limit","$count"].includes(t)?$[t](n,e):e.map((e=>$[t](n,e))).filter(Boolean)}),r),e.expression=a,e.filter=o,e}({});